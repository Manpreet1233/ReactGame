{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","board","Array","fill","player","winLines","index","length","a","b","c","this","alert","newBoard","setState","checkWinner","Box","map","box","className","key","onClick","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAoEeA,G,kBAhEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAQC,MAAM,GAAGC,KAAK,MACtBC,OAAQ,KAJO,E,2EAmBjB,IAXF,IAAIC,EACJ,CACE,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,MAEFC,EAAQ,EAAGA,EAAQD,EAASE,OAAQD,IAAS,CAAC,IAAD,cACpCD,EAASC,GAD2B,GAC7CE,EAD6C,KAC3CC,EAD2C,KACzCC,EADyC,KAEhDC,KAAKX,MAAMC,MAAMO,IAAMG,KAAKX,MAAMC,MAAMO,KAAOG,KAAKX,MAAMC,MAAMQ,IAAME,KAAKX,MAAMC,MAAMO,KAAOG,KAAKX,MAAMC,MAAMS,IACjHE,MAAM,c,kCAKAN,GACV,IAAIO,EAAWF,KAAKX,MAAMC,MACK,OAA5BU,KAAKX,MAAMC,MAAMK,KAClBO,EAASP,GAASK,KAAKX,MAAMI,OAC7BO,KAAKG,SAAS,CACZb,MAAOY,EACPT,OAA8B,MAAtBO,KAAKX,MAAMI,OAAiB,IAAM,MAG9CO,KAAKI,iB,+BAKI,IAAD,OAEFC,EAAML,KAAKX,MAAMC,MAAMgB,KAC3B,SAACC,EAAIZ,GAAL,OACA,yBAAKa,UAAU,MACfC,IAAKd,EACLe,QAAS,kBAAM,EAAKC,YAAYhB,KAC/BY,MAID,OACE,yBAAKC,UAAU,aACb,+CACA,yBAAKA,UAAU,SACdH,Q,GAzDOO,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4bbd1d19.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      board : Array(9).fill(null),\n      player: \"X\"\n    }\n  }\ncheckWinner() {\n  let winLines = \n  [\n    [\"0\", \"1\", \"2\"],\n    [\"3\", \"4\", \"5\"],\n    [\"6\", \"7\", \"8\"],\n    [\"0\", \"3\", \"6\"],\n    [\"1\", \"4\", \"7\"],\n    [\"2\", \"5\", \"8\"],\n    [\"0\", \"4\", \"8\"],\n    [\"2\", \"4\", \"6\"],\n  ]\n    for (let index = 0; index < winLines.length; index++) {\n      const [a,b,c] = winLines[index];\n      if (this.state.board[a] && this.state.board[a] === this.state.board[b] && this.state.board[a] === this.state.board[c]) {\n        alert('you won');\n      }\n    }\n  }\n\n  handleClick(index) {\n    let newBoard = this.state.board\n    if(this.state.board[index] === null) {\n      newBoard[index] = this.state.player\n      this.setState({\n        board: newBoard,\n        player: this.state.player === \"X\" ? \"0\" : \"X\"\n    })\n    \n    this.checkWinner()\n  }\n}\n\n  //using {Box} means calling the value of Box \n  render () {\n    //looping through the array that was created in constructor\n    const Box = this.state.board.map(\n      (box,index) => \n      <div className=\"box\" \n      key={index} \n      onClick={() => this.handleClick(index)}>\n      {box}\n      </div>\n    )\n\n      return (\n        <div className=\"container\">\n          <h1>Tic Tac Toe App</h1>\n          <div className=\"board\">\n          {Box}\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}